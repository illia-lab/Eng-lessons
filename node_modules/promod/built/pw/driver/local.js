"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.browserNameMapping = exports.runLocalEnv = void 0;
const sat_utils_1 = require("sat-utils");
const playwright_core_1 = require("playwright-core");
const browserNameMapping = {
    chrome: playwright_core_1.chromium,
    firefox: playwright_core_1.firefox,
    webkit: playwright_core_1.webkit,
};
exports.browserNameMapping = browserNameMapping;
const shouldBeHeadless = (args, isHeadlessRequired, fullConfig) => {
    if ((0, sat_utils_1.safeJSONstringify)(fullConfig).includes('--headless')) {
        return true;
    }
    if ((0, sat_utils_1.isBoolean)(isHeadlessRequired)) {
        return isHeadlessRequired;
    }
    return args.some((arg) => arg === '--headless');
};
const throwInstructionError = (additional = '') => {
    throw new Error(`${additional}Run 'npx playwright install' to download and install browsers`);
};
const getCombinedConfig = (config = {}) => {
    const combinedConfig = config;
    return combinedConfig;
};
const runLocalEnv = async (config) => {
    if (config.wsEndpoint || config.browserCDPWSEndpoint) {
        return config;
    }
    const combinedConfig = getCombinedConfig(config);
    // TODO investigate how add prefs to chrome
    const { downloadsPath, headless = false, args = [], agent } = combinedConfig;
    const isHeadless = shouldBeHeadless(args, headless, combinedConfig);
    const server = await browserNameMapping[config.capabilities.browserName].launchServer({
        headless: isHeadless,
        args,
        downloadsPath,
    });
    const wsEndpoint = server.wsEndpoint();
    return {
        server,
        wsEndpoint,
        capabilities: combinedConfig.capabilities,
    };
};
exports.runLocalEnv = runLocalEnv;
//# sourceMappingURL=local.js.map