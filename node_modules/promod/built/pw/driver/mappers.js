"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findViewPort = exports.findUserAgentIfExists = exports.findDownloadDefaultDir = exports.findDeviceMetrics = void 0;
const sat_utils_1 = require("sat-utils");
const findRequiredPropertyValue = (capabilitiesDescriptor, propName) => {
    let userAgentValue;
    if ((0, sat_utils_1.isObject)(capabilitiesDescriptor)) {
        for (const key of Object.keys(capabilitiesDescriptor)) {
            if (key === propName) {
                userAgentValue = capabilitiesDescriptor[key];
                return userAgentValue;
            }
            if ((0, sat_utils_1.isPrimitive)(capabilitiesDescriptor[key])) {
                continue;
            }
            if ((0, sat_utils_1.isObject)(capabilitiesDescriptor[key])) {
                userAgentValue = findRequiredPropertyValue(capabilitiesDescriptor[key], propName);
                if (userAgentValue)
                    return userAgentValue;
            }
        }
    }
    return userAgentValue;
};
const findUserAgentIfExists = (capabilitiesDescriptor) => {
    const userAgentPropName = 'userAgent';
    return findRequiredPropertyValue(capabilitiesDescriptor, userAgentPropName);
};
exports.findUserAgentIfExists = findUserAgentIfExists;
const findDownloadDefaultDir = (capabilitiesDescriptor) => {
    const defaultDownloadDirectoryName = 'default_directory';
    return findRequiredPropertyValue(capabilitiesDescriptor, defaultDownloadDirectoryName);
};
exports.findDownloadDefaultDir = findDownloadDefaultDir;
const findDeviceMetrics = (capabilitiesDescriptor) => {
    const deviceMetricsName = 'deviceMetrics';
    return findRequiredPropertyValue(capabilitiesDescriptor, deviceMetricsName);
};
exports.findDeviceMetrics = findDeviceMetrics;
const findViewPort = (capabilitiesDescriptor) => {
    const viewPortRg = /(?<=--window-size=)(\d+,\d+)/gim;
    const capabilitiesDescriptorStr = (0, sat_utils_1.isString)(capabilitiesDescriptor)
        ? capabilitiesDescriptor
        : (0, sat_utils_1.safeJSONstringify)(capabilitiesDescriptor);
    const matched = capabilitiesDescriptorStr.match(viewPortRg);
    if (matched) {
        const [width, height] = matched[0].split(',');
        return { width: Number(width), height: Number(height) };
    }
};
exports.findViewPort = findViewPort;
//# sourceMappingURL=mappers.js.map