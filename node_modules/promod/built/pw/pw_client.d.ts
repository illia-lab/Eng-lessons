/// <reference types="node" />
import { waitForCondition } from 'sat-utils';
import { Locator } from 'playwright-core';
import type { Browser as PWBrowser, BrowserContext, Page } from 'playwright-core';
import type { TSwitchToIframe, ExecuteScriptFn, TCookie, TLogLevel, TSwitchBrowserTabPage, PromodElementType } from '../interface';
declare class ContextWrapper {
    server: PWBrowser;
    /** @private */
    private _currentContext;
    /** @private */
    private _currentPage;
    /** @private */
    private _contextConfig;
    constructor(serverBrowser: PWBrowser, config?: {});
    switchPage(data: TSwitchBrowserTabPage): Promise<void>;
    getPageLogs(): any[];
    runNewContext(browserData?: {
        currentBrowserName?: string;
        newBrowserName?: string;
        capabilities?: any;
    }): Promise<void>;
    getCurrentContext(): Promise<BrowserContext>;
    changeContext({ index, browserName }: TSwitchBrowserTabPage): Promise<void>;
    getCurrentPage(): Promise<Page>;
    closeAllContexts(): Promise<void>;
    getContexts(): Promise<BrowserContext[]>;
}
declare class Browser {
    wait: typeof waitForCondition;
    _engineDriver: PWBrowser;
    _contextWrapper: ContextWrapper;
    _contextFrame: Page | (() => Promise<Page>);
    _contextFrameHolder: Locator;
    /** @private */
    private _server;
    /** @private */
    private appBaseUrl;
    /** @private */
    private initialTab;
    /** @private */
    private _engineDrivers;
    /** @private */
    private _createNewDriver;
    constructor();
    static getBrowser(): Browser;
    currentClient(): PWBrowser;
    injectEngine({ context, page }: {
        context?: BrowserContext;
        page?: Page;
    }): void;
    /** @private */
    private getWorkingContext;
    /** @private */
    private getCurrentPage;
    setBasicAuth(authData: {
        username: string;
        password: string;
    }, dontThrowOnError?: boolean): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * const currentPageScreenshot = await browser.getTabs();
     *
     * @returns {Promise<any[]>}
     */
    getTabs(): Promise<Page[]>;
    runNewBrowser(browserData?: {
        currentBrowserName?: string;
        newBrowserName?: string;
        capabilities?: any;
    }): Promise<void>;
    switchToBrowser(browserData?: TSwitchBrowserTabPage): Promise<void>;
    setClient({ driver, server, config }: {
        driver: any;
        server: any;
        config: any;
    }): void;
    set setCreateNewDriver(driverCreator: any);
    get keyboard(): {
        ArrowDown: string;
        ArrowLeft: string;
        ArrowRight: string;
        ArrowUp: string;
        End: string;
        Home: string;
        PageDown: string;
        PageUp: string;
        Alt: string;
        Backspace: string;
        Tab: string;
        Escape: string;
        Space: string;
        Delete: string;
        Enter: string;
        Clear: string;
        Shift: string;
        F1: string;
        F2: string;
        F3: string;
        F4: string;
        F5: string;
        F6: string;
        F7: string;
        F8: string;
        F9: string;
        F10: string;
        F11: string;
        F12: string;
    };
    get Key(): import("selenium-webdriver/lib/input").IKey;
    get baseUrl(): string;
    set baseUrl(url: string);
    returnToInitialTab(): Promise<void>;
    private closeAllpagesExceptInitial;
    /**
     *
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.openNewTab('https://www.npmjs.com/package/promod');
     *
     * @param {string} url url that needs to open in new browser tab
     * @return {Promise<void>}
     */
    openNewTab(url?: string): Promise<void>;
    /**
     *
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = seleniumWD;
     *
     * await browser.switchToTab({ index: 2, expectedQuantity: 3 });
     *
     * @param {TSwitchBrowserTabPage} tabObject tab description
     * @return {Promise<void>}
     */
    switchToTab(tabObject: TSwitchBrowserTabPage): Promise<void>;
    /**
     * @info https://github.com/microsoft/playwright/issues/10143
     *
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * const tabTitles = [];
     * await browser.makeActionAtEveryTab(async () => {
     *    tabTitles.push(await browser.getTitle());
     * });
     *
     * @param {!Function} action action that needs to be performed
     * @return {Promise<void>}
     */
    makeActionAtEveryTab(action: (...args: any) => Promise<any>, handles?: string[]): Promise<void>;
    /**
     * @info https://github.com/microsoft/playwright/issues/10143
     *
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.setCookies({name: 'test', value: 'test'});
     * @param {TCookie | TCookie[]} cookies cookies object
     * @returns {Promise<void>}
     */
    setCookies(cookies: TCookie | TCookie[]): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * const cookies = await browser.getCookies();
     * @return {Promise<Array<TCookie>>} cookies list
     */
    getCookies(): Promise<import("playwright-core").Cookie[]>;
    /**
     * @info https://github.com/microsoft/playwright/issues/10143
     *
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.deleteCookie('test');
     * @param {string} name cookie name
     * @returns {Promise<void>}
     */
    deleteCookie(name: string): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * const cookie = await browser.getCookieByName('test');
     * @param {string} name cookie name
     * @return {Promise<{ name: string; value: string }>}
     */
    getCookieByName(name: string): Promise<{
        name: string;
        value: string;
    }>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.deleteAllCookies();
     *
     * @return {Promise<void>}
     */
    deleteAllCookies(): Promise<void>;
    /**
     * switchToBrowserTab
     * @private
     */
    private switchToBrowserTab;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * const currentTabsCount = await browser.getTabsCount();
     *
     * @returns {Promise<number>}
     */
    getTabsCount(): Promise<number>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * const currentPageUrl = await browser.getCurrentUrl();
     *
     * @return {Promise<string>}
     */
    getCurrentUrl(): Promise<string>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * const currentPageScreenshot = await browser.takeScreenshot();
     *
     * @returns {Promise<Buffer>}
     */
    takeScreenshot(): Promise<Buffer>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.maximize();
     *
     * @return {Promise<void>}
     */
    maximize(): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * const browserLogs = await browser.getBrowserLogs();
     *
     * @return {Promise<TLogLevel[] | string>}
     */
    getBrowserLogs(): Promise<TLogLevel[] | string>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.keyDownAndHold(browser.keyboard.PageDown)
     *
     * @param {string} key key that needs to press down
     * @return {Promise<void>}
     */
    keyDownAndHold(key: string, element?: PromodElementType): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.keyUp(browser.keyboard.PageDown)
     *
     * @param {string} key key that needs to press down
     * @return {Promise<void>}
     */
    keyUp(key: string, element?: PromodElementType): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.keyDownAndUp(browser.keyboard.PageDown)
     *
     * @param {string} key key that needs to press down
     * @return {Promise<void>}
     */
    keyDownAndUp(key: string, element?: PromodElementType): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * cosnt { height, width } = await browser.getWindomSize();
     *
     * @return {Promise<{ height: number; width: number }>} window size
     */
    getWindomSize(): Promise<{
        height: number;
        width: number;
    }>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * cosnt title = await browser.getTitle();
     *
     * @return {Promise<string>} tab (page) title
     */
    getTitle(): Promise<string>;
    getCurrentTab(): Promise<Page>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.get('https://github.com/Simple-Automation-Testing/promod');
     *
     * @param {string} url url that needs to be open
     * @return {Promise<void>}
     */
    get(url: string): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.switchToIframe('my-iframe');
     *
     * @param {string} selector iframe selector
     * @param {boolean} [jumpToDefaultFirst] should switch to top frame first
     * @return {Promise<void>}
     */
    switchToIframe(selector: string, jumpToDefaultFirst?: boolean, { timeout, message }?: TSwitchToIframe): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.switchToDefauldIframe();
     *
     * @return {Promise<void>}
     */
    switchToDefauldIframe(): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.setWindowSize(800, 600);
     *
     * @param {number} width window width
     * @param {number} height window height
     * @return {Promise<void>}
     */
    setWindowSize(width: number, height: number): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.sleep(800);
     *
     * @param {number} time time in ms
     * @return {Promise<void>}
     */
    sleep(time: number): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * const result = await browser.executeScript(() => document.body.offsetHeight);
     *
     * @param {!Function} script scripts that needs to be executed
     * @param {any|any[]} [args] function args
     * @returns {Promise<any>}
     */
    executeScript(script: ExecuteScriptFn, args?: any | any[]): Promise<any>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.back();
     *
     * @return {Promise<void>}
     */
    back(): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.forward();
     *
     * @return {Promise<void>}
     */
    forward(): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.refresh();
     *
     * @return {Promise<void>}
     */
    refresh(): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.quit();
     *
     * @return {Promise<void>}
     */
    quit(): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.quitAll();
     *
     * @return {Promise<void>}
     */
    quitAll(): Promise<void>;
    /**
     * @example
     * const { playwrightWD } = require('promod');
     * const { browser } = playwrightWD;
     *
     * await browser.close();
     *
     * @return {Promise<void>}
     */
    close(): Promise<void>;
    scrollElementByMouseWheel(element: PromodElementType, x: any, y: any, deltaX: any, deltaY: any, duration: any): Promise<void>;
    scrollByMouseWheel(x: any, y: any, deltaX: any, deltaY: any, duration: any): Promise<void>;
    keyboardPressEsc(): Promise<void>;
    keyboardPressEnter(): Promise<void>;
}
declare const browser: Browser;
export { browser, Browser };
