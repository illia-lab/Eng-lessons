declare function asyncRepeat(howMany: number, callBack: (index: number) => Promise<any> | any, repeatEvenIfCallbackFails?: boolean): Promise<void>;
declare function asyncMap<T = unknown, R = unknown>(ctxArray: T[], callBack: (item: T, index: number, arr: T[]) => Promise<R>): Promise<R[]>;
declare function asyncFilter<T = unknown, R = unknown>(ctxArray: T[], callBack: (item: T, index: number, arr: T[]) => Promise<boolean>): Promise<T[]>;
declare function asyncEvery<T = unknown>(ctxArray: T[], callBack: (item: T, index: number, arr: T[]) => Promise<boolean>): Promise<boolean>;
declare function asyncSome<T = unknown>(ctxArray: T[], callBack: (item: T, index: number, arr: T[]) => Promise<boolean>): Promise<boolean>;
declare function asyncReduce<T = unknown, R = unknown>(ctxArray: T[], callBack: (accum: R, item: T, index: number, arr: T[]) => Promise<R | unknown>, ...rest: unknown[] | R[]): Promise<R | unknown>;
declare function asyncForEach<T = unknown>(ctxArray: T[], callBack: (item: T, index: number, arr: T[]) => Promise<void>): Promise<void>;
export { asyncRepeat, asyncMap, asyncForEach, asyncReduce, asyncEvery, asyncSome, asyncFilter };
