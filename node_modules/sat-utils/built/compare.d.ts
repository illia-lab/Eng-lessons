export type TCompareOpts = {
    customCheck?: boolean;
    stringIncludes?: boolean;
    stringLowercase?: boolean;
    stringUppercase?: boolean;
    checkEmptyStrings?: boolean;
    checkStringLength?: boolean;
    ignoreNonStringsTypes?: boolean;
    dataIncldesPatternPart?: boolean;
    dataIncludesMembers?: boolean;
    patternIncludesMembers?: boolean;
    everyArrayItem?: boolean;
    allowEmptyArray?: boolean;
    allowNumberTypecast?: boolean;
    separator?: string;
    ignoreProperties?: string | string[];
};
type TCompareToPattern = ((data: any, patter: any, options?: TCompareOpts) => {
    result: boolean;
    message: string;
}) & {
    toDataIncludes: (arg: string) => string;
    checkThatDataIncludes: (arg: string | any) => boolean;
    removeDataIncludesId: (arg: string) => string;
    toPatternIncludes: (arg: string) => string;
    checkThatPatternIncludes: (arg: string | any) => boolean;
    removePatternIncludesId: (arg: string) => string;
    toCheckNumber: (arg: string) => string;
    checkThatCheckNumber: (arg: string | any) => boolean;
    removeCheckNumberId: (arg: string) => string;
    dataToLowercase: (arg: string) => string;
    checkThatDataLowercase: (arg: string | any) => boolean;
    removeDataLowercase: (arg: string) => string;
    patternToLowercase: (arg: string) => string;
    checkThatPatternLowercase: (arg: string | any) => boolean;
    removePatternLowercase: (arg: string) => string;
    dataToUppercase: (arg: string) => string;
    checkThatDataUppercase: (arg: string | any) => boolean;
    removeDataUppercase: (arg: string) => string;
    patternToUppercase: (arg: string) => string;
    checkThatPatternUppercase: (arg: string | any) => boolean;
    removePatternUppercase: (arg: string) => string;
};
declare const compareToPattern: TCompareToPattern;
export { compareToPattern };
