"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.comparePrimitives = exports.removePatternUppercase = exports.checkThatPatternUppercase = exports.patternToUppercase = exports.removeDataUppercase = exports.checkThatDataUppercase = exports.dataToUppercase = exports.removePatternLowercase = exports.checkThatPatternLowercase = exports.patternToLowercase = exports.removeDataLowercase = exports.checkThatDataLowercase = exports.dataToLowercase = exports.removeCheckNumberId = exports.checkThatCheckNumber = exports.toCheckNumber = exports.removePatternIncludesId = exports.checkThatPatternIncludes = exports.toPatternIncludes = exports.removeDataIncludesId = exports.checkThatDataIncludes = exports.toDataIncludes = void 0;
const types_1 = require("../types");
const utils_1 = require("../utils");
const randomizer_1 = require("../randomizer");
const { toDataIncludes, checkThatDataIncludes, removeDataIncludesId } = (function () {
    const checkIncludesId = `${(0, randomizer_1.getRandomString)(7)}_data_includes=`;
    return {
        toDataIncludes: (item) => `${checkIncludesId}${item}`,
        checkThatDataIncludes: (item) => item.indexOf(checkIncludesId) === 0,
        removeDataIncludesId: (item) => item.replace(checkIncludesId, ''),
    };
})();
exports.toDataIncludes = toDataIncludes;
exports.checkThatDataIncludes = checkThatDataIncludes;
exports.removeDataIncludesId = removeDataIncludesId;
const { toPatternIncludes, checkThatPatternIncludes, removePatternIncludesId } = (function () {
    const patternIncludesId = `${(0, randomizer_1.getRandomString)(7)}_pattern_includes=`;
    return {
        toPatternIncludes: (item) => `${patternIncludesId}${item}`,
        checkThatPatternIncludes: (item) => item.indexOf(patternIncludesId) === 0,
        removePatternIncludesId: (item) => item.replace(patternIncludesId, ''),
    };
})();
exports.toPatternIncludes = toPatternIncludes;
exports.checkThatPatternIncludes = checkThatPatternIncludes;
exports.removePatternIncludesId = removePatternIncludesId;
const { toCheckNumber, checkThatCheckNumber, removeCheckNumberId } = (function () {
    const patternIncludesId = `${(0, randomizer_1.getRandomString)(7)}_check_number=`;
    return {
        toCheckNumber: (item) => `${patternIncludesId}${item}`,
        checkThatCheckNumber: (item) => item.indexOf(patternIncludesId) === 0,
        removeCheckNumberId: (item) => item.replace(patternIncludesId, ''),
    };
})();
exports.toCheckNumber = toCheckNumber;
exports.checkThatCheckNumber = checkThatCheckNumber;
exports.removeCheckNumberId = removeCheckNumberId;
const { dataToLowercase, checkThatDataLowercase, removeDataLowercase } = (function () {
    const patternIncludesId = `${(0, randomizer_1.getRandomString)(7)}_data_lower=`;
    return {
        dataToLowercase: (item) => `${patternIncludesId}${item}`,
        checkThatDataLowercase: (item) => item.indexOf(patternIncludesId) === 0,
        removeDataLowercase: (item) => item.replace(patternIncludesId, ''),
    };
})();
exports.dataToLowercase = dataToLowercase;
exports.checkThatDataLowercase = checkThatDataLowercase;
exports.removeDataLowercase = removeDataLowercase;
const { patternToLowercase, checkThatPatternLowercase, removePatternLowercase } = (function () {
    const patternIncludesId = `${(0, randomizer_1.getRandomString)(7)}_pattern_lower=`;
    return {
        patternToLowercase: (item) => `${patternIncludesId}${item}`,
        checkThatPatternLowercase: (item) => item.indexOf(patternIncludesId) === 0,
        removePatternLowercase: (item) => item.replace(patternIncludesId, ''),
    };
})();
exports.patternToLowercase = patternToLowercase;
exports.checkThatPatternLowercase = checkThatPatternLowercase;
exports.removePatternLowercase = removePatternLowercase;
const { dataToUppercase, checkThatDataUppercase, removeDataUppercase } = (function () {
    const patternIncludesId = `${(0, randomizer_1.getRandomString)(7)}_data_upper=`;
    return {
        dataToUppercase: (item) => `${patternIncludesId}${item}`,
        checkThatDataUppercase: (item) => item.indexOf(patternIncludesId) === 0,
        removeDataUppercase: (item) => item.replace(patternIncludesId, ''),
    };
})();
exports.dataToUppercase = dataToUppercase;
exports.checkThatDataUppercase = checkThatDataUppercase;
exports.removeDataUppercase = removeDataUppercase;
const { patternToUppercase, checkThatPatternUppercase, removePatternUppercase } = (function () {
    const patternIncludesId = `${(0, randomizer_1.getRandomString)(7)}_pattern_upper=`;
    return {
        patternToUppercase: (item) => `${patternIncludesId}${item}`,
        checkThatPatternUppercase: (item) => item.indexOf(patternIncludesId) === 0,
        removePatternUppercase: (item) => item.replace(patternIncludesId, ''),
    };
})();
exports.patternToUppercase = patternToUppercase;
exports.checkThatPatternUppercase = checkThatPatternUppercase;
exports.removePatternUppercase = removePatternUppercase;
// eslint-disable-next-line sonarjs/cognitive-complexity
function comparePrimitives(data, pattern, { stringIncludes, stringLowercase, stringUppercase, allowNumberTypecast, checkEmptyStrings, ignoreNonStringsTypes, checkStringLength, } = {}) {
    let comparisonResult;
    let comparisonMessage;
    let messagePostfix = '';
    const areBothStrings = (0, types_1.isString)(data) && (0, types_1.isString)(pattern);
    const isDataInclude = (0, types_1.isString)(pattern) && checkThatDataIncludes(pattern);
    const isPatternInclude = (0, types_1.isString)(pattern) && checkThatPatternIncludes(pattern);
    const isPatternToUpper = (0, types_1.isString)(pattern) && checkThatPatternUppercase(pattern);
    const isPatternToLower = (0, types_1.isString)(pattern) && checkThatPatternLowercase(pattern);
    const isDataToUpper = (0, types_1.isString)(pattern) && checkThatDataUppercase(pattern);
    const isDataToLower = (0, types_1.isString)(pattern) && checkThatDataLowercase(pattern);
    if (ignoreNonStringsTypes && !(0, types_1.isString)(data)) {
        return { comparisonResult: true, comparisonMessage: '' };
    }
    if (isPatternToUpper) {
        pattern = removePatternUppercase(pattern).toUpperCase();
        messagePostfix += 'pattern is uppercased';
    }
    if (isPatternToLower) {
        pattern = removePatternLowercase(pattern).toLowerCase();
        messagePostfix += 'pattern is lowercased';
    }
    if (isDataToUpper && areBothStrings) {
        pattern = removeDataUppercase(pattern);
        data = data.toUpperCase();
        messagePostfix += 'data is uppercased';
    }
    if (isDataToLower && areBothStrings) {
        pattern = removeDataLowercase(pattern);
        data = data.toLowerCase();
        messagePostfix += 'data is lowercased';
    }
    if (isDataInclude) {
        pattern = removeDataIncludesId(pattern);
    }
    if (isPatternInclude) {
        pattern = removePatternIncludesId(pattern);
    }
    if (areBothStrings && stringLowercase) {
        data = data.toLowerCase();
        pattern = pattern.toLowerCase();
        messagePostfix += 'data and pattern are lowercased';
    }
    if (areBothStrings && stringUppercase) {
        data = data.toUpperCase();
        pattern = pattern.toUpperCase();
        messagePostfix += 'data and pattern are uppercased';
    }
    if (checkStringLength && (0, utils_1.safeHasOwnPropery)(pattern, 'length') && Object.keys(pattern).length === 1) {
        comparisonResult = (0, utils_1.execNumberExpression)((0, types_1.isString)(pattern.length) ? pattern.length : `===${pattern.length}`, data.length);
        comparisonMessage = `expected: string has ${pattern.length} length, actual: string has ${data.length} length`;
    }
    else if (checkEmptyStrings && (0, types_1.isString)(data) && ((0, types_1.isUndefined)(pattern) || (0, types_1.isNull)(pattern))) {
        comparisonResult = Boolean(data.length);
        comparisonMessage = `expected: ${data} should not be empty string `;
    }
    else if ((0, types_1.isDate)(data) && (0, types_1.isDate)(pattern)) {
        comparisonResult = +data === +pattern;
        comparisonMessage = `expected: ${pattern}, actual: ${data} `;
    }
    else if ((0, types_1.isNumber)(data) && (0, types_1.isString)(pattern) && checkThatCheckNumber(pattern)) {
        const expression = removeCheckNumberId(pattern).trim();
        comparisonResult = (0, utils_1.execNumberExpression)(expression, data);
        comparisonMessage = `expected: ${data} ${expression} `;
    }
    else if (allowNumberTypecast && (((0, types_1.isNumber)(data) && (0, types_1.isString)(pattern)) || ((0, types_1.isNumber)(pattern) && (0, types_1.isString)(data)))) {
        comparisonResult = data == pattern;
        comparisonMessage = `expected: ${pattern}, actual: ${data} `;
        messagePostfix += ' typecast is allowed';
    }
    else if (areBothStrings && isPatternInclude) {
        comparisonResult = pattern.includes(data);
        comparisonMessage = `expected: pattern ${pattern} string should include data ${data} `;
    }
    else if (areBothStrings && isDataInclude) {
        comparisonResult = data.includes(pattern);
        comparisonMessage = `expected: data ${data} string should include pattern ${pattern} `;
    }
    else if (areBothStrings && stringIncludes) {
        comparisonResult = data.includes(pattern);
        comparisonMessage = `expected: data ${data} string should include pattern ${pattern} `;
    }
    else if ((0, types_1.isString)(data) && (0, types_1.isRegExp)(pattern)) {
        comparisonResult = pattern.test(data);
        comparisonMessage = `expected: data ${data} string should match to regex ${pattern.toString()} `;
    }
    else {
        comparisonResult = data === pattern;
        comparisonMessage = `expected: ${pattern}, actual: ${data} `;
    }
    return { comparisonResult, comparisonMessage: `${comparisonMessage}${messagePostfix}` };
}
exports.comparePrimitives = comparePrimitives;
//# sourceMappingURL=result.handlers.js.map