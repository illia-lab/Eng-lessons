declare function wrapInGreen(txt: string): string;
declare function wrapInRed(txt: string): string;
declare function wrapInBlue(txt: string): string;
declare function wrapInYellow(txt: string): string;
declare function wrapInMagenta(txt: string): string;
declare const colors: {
    red: (text: string) => string;
    magenta: (text: string) => string;
    green: (text: string) => string;
    yellow: (text: string) => string;
    blue: (text: string) => string;
};
export type Tlogger = {
    logLevel: string;
    log(...args: any[]): void;
    info(...args: any[]): void;
    warn(...args: any[]): void;
    error(...args: any[]): void;
    setLogLevel(level: 'ERROR' | 'WARN' | 'INFO' | 'VERBOSE' | 'MUTE' | string): void;
    addCustomLevel<T extends PropertyKey = string>(loggerDescription: T, logLevel: string, description: string, consoleOutput?: 'log' | 'info' | 'error' | 'warn', descriptionColor?: 'Reset' | 'Bright' | 'Dim' | 'Underscore' | 'Blink' | 'Reverse' | 'Hidden' | 'FgBlack' | 'FgRed' | 'FgGreen' | 'FgYellow' | 'FgBlue' | 'FgMagenta' | 'FgCyan' | 'FgWhite' | 'BgBlack' | 'BgRed' | 'BgGreen' | 'BgYellow' | 'BgBlue' | 'BgMagenta' | 'BgCyan' | 'BgWhite', messageColor?: 'Reset' | 'Bright' | 'Dim' | 'Underscore' | 'Blink' | 'Reverse' | 'Hidden' | 'FgBlack' | 'FgRed' | 'FgGreen' | 'FgYellow' | 'FgBlue' | 'FgMagenta' | 'FgCyan' | 'FgWhite' | 'BgBlack' | 'BgRed' | 'BgGreen' | 'BgYellow' | 'BgBlue' | 'BgMagenta' | 'BgCyan' | 'BgWhite' | ''): Tlogger & {
        [K in T]: (...args: any[]) => void;
    };
};
declare function createLogger(): Tlogger;
export { createLogger, colors, wrapInRed, wrapInMagenta, wrapInGreen, wrapInYellow, wrapInBlue };
