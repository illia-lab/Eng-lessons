"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomArrayItem = exports.getRandomSubString = exports.getRandomString = void 0;
/* eslint-disable unicorn/no-object-as-default-parameter, unicorn/consistent-function-scoping*/
const types_1 = require("./types");
const utils_1 = require("./utils");
function getRandomSubString(str, length) {
    if (!(0, types_1.isString)(str)) {
        throw new TypeError(`getRandomSubString(): first argument should be a string, current arg is ${(0, types_1.getType)(str)}`);
    }
    if (!(0, types_1.isNumber)(length)) {
        throw new TypeError(`getRandomSubString(): second argument should be a number, current arg is ${(0, types_1.getType)(length)}`);
    }
    return Array.from({ length })
        .map(() => str.charAt(Math.floor(Math.random() * str.length)))
        .join('');
}
exports.getRandomSubString = getRandomSubString;
function getRandomString(length, opts = { letters: true }) {
    const allowedOptions = new Set(['numbers', 'letters', 'lettersAndNumbers', 'symbols', 'lettersNumbersAndSymbols']);
    const thowOptsError = () => {
        throw new Error(`getRandomString(): second argument should be an object with next opts
        numbers?: boolean;
        lettersAndNumbers?: boolean;
        symbols?: boolean;
        lettersNumbersAndSymbols?: boolean;
        lowerCase?: boolean;
    `);
    };
    if (!(0, types_1.isObject)(opts)) {
        thowOptsError();
    }
    const options = Object.assign({}, opts);
    if (!Object.keys(options).some(k => allowedOptions.has(k) && options[k])) {
        options['letters'] = true;
    }
    const l = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    const s = '!@#$%^&*(((()))_+~?>"|\\}{[]';
    const n = '01234567890';
    const ln = l + n;
    const lns = l + s + n;
    const data = {
        letters: l,
        numbers: n,
        lettersAndNumbers: ln,
        symbols: s,
        lettersNumbersAndSymbols: lns,
    };
    if (!(0, types_1.isNumber)(length)) {
        throw new Error(`getRandomString(): first argument should be a number, current arg is ${(0, types_1.getType)(length)}`);
    }
    const { lowerCase } = options, restOpts = __rest(options, ["lowerCase"]);
    const optsKeys = Object.keys(restOpts);
    if (!optsKeys.length || !data[optsKeys[0]]) {
        thowOptsError();
    }
    const charsKey = optsKeys[0] || 'letters';
    const randomStr = getRandomSubString(data[charsKey], length);
    return lowerCase ? randomStr.toLowerCase() : randomStr;
}
exports.getRandomString = getRandomString;
function getRandomArrayItem(itemsList, quaintity) {
    if ((0, types_1.isUndefined)(quaintity)) {
        quaintity = 1;
    }
    if (!Array.isArray(itemsList)) {
        throw new TypeError(`getRandomArrayItem(): first argument should be an array, current arg is ${(0, types_1.getType)(itemsList)}`);
    }
    if (!itemsList.length) {
        throw new RangeError(`getRandomArrayItem(): given array is empty`);
    }
    if (quaintity > itemsList.length) {
        throw new RangeError(`getRandomArrayItem(): more elements taken: ${quaintity} than exist within the given array. Array length ${itemsList.length}`);
    }
    if (quaintity === 1) {
        return itemsList[Math.floor(Math.random() * itemsList.length)];
    }
    return (0, utils_1.shuffleArr)(itemsList).slice(0, quaintity);
}
exports.getRandomArrayItem = getRandomArrayItem;
//# sourceMappingURL=randomizer.js.map