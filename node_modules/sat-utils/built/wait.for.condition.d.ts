declare function sleep(millisecond?: number): Promise<void>;
export type IWaiterOpts = {
    timeout?: number;
    interval?: number;
    dontThrow?: boolean;
    falseIfError?: boolean;
    stopIfNoError?: boolean;
    message?: string | ((timeout: number, callbackError?: any) => Promise<string> | string);
    waiterError?: new (...args: any[]) => any;
    analyseResult?: (...args: any[]) => boolean | Promise<boolean>;
    before?: () => Promise<void> | any;
    after?: () => Promise<void> | any;
    callEveryCycle?: () => Promise<void> | any;
};
/**
 * @example
 * const {waitForCondition} = require('sat-utils');
 *
 * waitResult();
 * async function waitResult() {
 *  await waitForCondition(async () => new Promise(res => setTimeout(res, 2500)), {
 *    timeout: 5000,
 *    interval: 500
 *  })
 * }
 *
 * @param {Function} callback
 * @param {!Object} options execution options
 * @param {number} [options.timeout] execution time
 * @param {number} [options.interval] call interval
 * @param {boolean} [options.dontThrow] if during waiting cylce result was not achived - last call back execution result will be returned as a waiting cycle result
 * @param {boolean} [options.falseIfError] if call back throws an error - counted as negative result
 * @param {boolean} [options.stopIfNoError] if callback did not throw error - counted as successful result
 * @param {Error|new (...args: any[]) => any} [options.waiterError] error which will be thrown if result will not achieved
 * @param {Function} [options.analyseResult] custom analyser of the call back result
 * @param {Function} [options.before] call before waiting cycle
 * @param {Function} [options.after] call after waiting cycle, even if result was not achived, if result achived - also will be executed
 * @param {Function} [options.callEveryCycle] call every time after main call back execution if result was not achived
 * @returns {any} any result that call back will return
 */
declare function waitForCondition(callback: any, options?: IWaiterOpts): Promise<any>;
declare namespace waitForCondition {
    var setDefaultOpts: (opts: IWaiterOpts) => void;
}
export { waitForCondition, sleep };
